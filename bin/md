#!/usr/bin/env ruby

require 'redcarpet'
require 'rainbow'


class TerminalRender < Redcarpet::Render::Base

  CODE_COLOR = "#D2D231"

  def normal_text(text)
    text
  end

  def block_code(code, language)
    Rainbow("```#{language}").bright.blue + "\n" +
      Rainbow(code).color(CODE_COLOR) + "\n" +
      Rainbow("```").bright.blue + "\n"
  end

  def codespan(code)
    Rainbow("`").bright.blue +
      Rainbow(code).color(CODE_COLOR) +
      Rainbow("`").bright.blue
  end

  def header(title, level)
    Rainbow('#' * level).bright.blue + ' ' + Rainbow(title).bright + "\n"
  end

  def double_emphasis(text)
    Rainbow("**").bright.blue +
      Rainbow(text).bright +
      Rainbow("**").bright.blue
  end

  def emphasis(text)
    Rainbow("*").bright.blue +
      Rainbow(text).italic +
      Rainbow("*").bright.blue
  end

  def linebreak
    "\n"
  end

  def paragraph(text)
    text + "\n\n"
  end

  def list(content, list_type)
    case list_type
    when :ordered
      nil
    when :unordered
      content + "\n"
    end
  end

  def list_item(content, list_type)
    case list_type
    when :ordered
      nil
    when :unordered
      Rainbow("*").bright.blue + " " + content
    end
  end

  # def autolink(link, link_type)
  # end

  # def link(link, title, content)
  # end

  # Block Level Calls
  #
  # * block_code(code, language)
  # block_quote(quote)
  # block_html(raw_html)
  # footnotes(content)
  # footnote_def(content, number)
  # * header(text, header_level)
  # hrule()
  # * list(contents, list_type)
  # * list_item(text, list_type)
  # * paragraph(text)
  # table(header, body)
  # table_row(content)
  # table_cell(content, alignment)
  #
  #
  # Span Level Calls
  #
  # * autolink(link, link_type)
  # * codespan(code)
  # * double_emphasis(text)
  # * emphasis(text)
  # image(link, title, alt_text)
  # * linebreak()
  # link(link, title, content)
  # raw_html(raw_html)
  # triple_emphasis(text)
  # strikethrough(text)
  # superscript(text)
  # underline(text)
  # highlight(text)
  # quote(text)
  # footnote_ref(number)
end


puts Redcarpet::Markdown.new(
  TerminalRender,
  fenced_code_blocks: true,
  no_intra_emphasis: true,
  lax_spacing: true,
  autolink: true,
  strikethrough: true
).render(ARGF.read)
